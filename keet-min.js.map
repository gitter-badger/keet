{"version":3,"sources":["src/components/templateParse/updateState.js","src/components/conditionalNodes.js","src/components/templateParse/conditionalCache.js","src/components/templateParse/conditionalSet.js","src/components/ternaryOps.js","src/components/genModelList.js","src/components/componentParse.js","src/components/templateParse/replaceCommentBlock.js","src/components/templateParse/valAssign.js","src/components/templateParse/replaceHandleBars.js","src/components/templateParse/inspectAttributes.js","src/components/templateParse/reconcile.js","src/components/templateParse/addEvent.js","src/components/templateParse/eventBuff.js","src/components/templateParse/diffNodes.js","src/components/genElement.js","src/components/parseStr.js","src/base/mount.js","utils.js","src/components/genModelTemplate.js","src/components/strInterpreter.js","keet.js"],"names":["updateState","state","updateStateList","catchNode","node","start","cNode","nextSibling","nodeType","DOCUMENT_ELEMENT_TYPE","isEqualNode","remove","firstChild","resolveConditionalNodes","conditional","setup","runner","currentNode","fetchFrag","frag","document","createDocumentFragment","cache","hasOwnProperty","cloneNode","call","this","parentNode","insertBefore","nodeValue","match","conditionalNodesRawEnd","__pristineFragment__","DOCUMENT_COMMENT_TYPE","appendChild","check","conditionalNodesRawStart","trim","reConditional","concat","nodes","conditionalCache","addState","base","i","length","bind","conditionalNodes","c","conditionalSet","instance","ternaryOps","input","t","split","condition","leftHand","rightHand","value","test","render","str","obj","m","genModelTemplate","documentFragment","range","createContextualFragment","setAttribute","removeProtoModel","id","after","p","getElementById","childNodes","Object","keys","map","cache$$1","genModelList","model","templateParse","modelList","listClone","updateOfNew","diffOfOld","pNode","equalLength","child","list","oldModel","listArg","idx","beforeNode","f","enableFiltering","outerHTML","undefined","hasAttribute","diff","diffModel","_len","arguments","args","Array","_key","pop","querySelector","replaceChild","lastChild","indexOf","removeChild","JSON","parse","stringify","getId","checkNodeAvailability","el","componentParse","componentStr","component","replace","cacheInit","ID","callBatchPoolUpdate","assert","replaceCommentBlock","rep","modelRep","re","valAssign","withTo","RegExp","replaceHandleBars","isAttr","props","ln","tnr","isObjectNotation","strInterpreter","inspectAttributes","nodeAttributes","attributes","a","ns","name","localName","removeAttribute","checked","recon","hasAttributes","reconcile","lookupParentNode","rootNode","getAttribute","addEvent","evtData","isModel","evtName","handler","addEventListener","fn","e","stopPropagation","target","currentTarget","getIndex","addEventModel","testEventNode","evtStore","obs","push","hasChildNodes","modelRaw","addEvt","_this","events","eventBuff","isEqual","oldNode","newNode","isIgnored","arbiter","nodeName","setAttr","oAttr","output","iAttr","j","attr","patch","store","count","newStore","checkNew","index","oldParentNode","checkOld","diffNodes","IS_STUB","clearState","stateList","parseStr","stub","setState","componentDidMount","_mount","tempDiv","createElement","innerHTML","_typeof","DOCUMENT_FRAGMENT_TYPE","DOCUMENT_TEXT_TYPE","genId","rd","Math","random","toString","minId","componentName","callback","notFound","find","ele","clearInterval","found","fail","setInterval","setTimeout","val","msg","Error","notEqual","b","inform","_len2","_key2","exec","apply","createModel","defineProperty","enumerable","configurable","get","set","listFilter","prop","filter","subscribe","add","_extends","kdata-id","update","updateObj","destroy","destroyObj","tmpl","isTernary","len","string","arrProps","fst","sec","some","inr","predicate","createRange","res","result","DELAY","morpher","genElement","componentDidUpdate","timer","updateContext","delay","clearTimeout","nextState","self","isArray","inVal","window","l","console","log","tr","trace","Keet","indentity","mount","link","componentWillMount"],"mappings":"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","file":"keet-min.js","sourcesContent":["export default function (state, updateStateList) {\r\n  if (typeof updateStateList === 'function') updateStateList(state)\r\n}\r\n","const conditionalNodesRawEnd = /\\{\\{\\/([^{}]+)\\}\\}/g\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\n\r\nlet cache = {}\r\n\r\n// rebuild the node structure\r\nfunction catchNode (node, start) {\r\n  let cNode\r\n  while (node) {\r\n    cNode = node\r\n    node = node.nextSibling\r\n    if (cNode && cNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      if (cNode.isEqualNode(start)) {\r\n        cNode.remove()\r\n        start = start.nextSibling\r\n      } else {\r\n        catchNode(cNode.firstChild, start)\r\n      }\r\n    } else if (cNode.isEqualNode(start)) {\r\n      cNode.remove()\r\n      start = start.nextSibling\r\n    }\r\n  }\r\n}\r\n\r\nfunction resolveConditionalNodes (node, conditional, setup, runner) {\r\n  let currentNode\r\n  let cNode\r\n  let fetchFrag\r\n  let frag = document.createDocumentFragment()\r\n  if (setup === 'initial' && !cache.hasOwnProperty(conditional)) {\r\n    cNode = node\r\n    while (cNode) {\r\n      currentNode = cNode\r\n      cNode = cNode.nextSibling\r\n      if (currentNode.nodeType !== DOCUMENT_ELEMENT_TYPE && currentNode.nodeValue.match(conditionalNodesRawEnd)) {\r\n        cNode = null\r\n        cache[conditional] = cache[conditional] || {}\r\n        // clean up pristine node\r\n        catchNode(this.__pristineFragment__.firstChild, frag.firstChild)\r\n        // since we work backward no need to check fragment recursive conditional states\r\n        cache[conditional].frag = frag\r\n      } else if (currentNode.nodeType !== DOCUMENT_COMMENT_TYPE) {\r\n        frag.appendChild(currentNode)\r\n      }\r\n    }\r\n  } else if (setup === 'conditional-set') {\r\n    if (node.nextSibling.isEqualNode(cache[conditional].frag.firstChild)) return\r\n    fetchFrag = cache[conditional].frag.cloneNode(true)\r\n    runner.call(this, fetchFrag.firstChild)\r\n    node.parentNode.insertBefore(fetchFrag, node.nextSibling)\r\n  }\r\n}\r\n\r\nexport {\r\n  resolveConditionalNodes as default,\r\n  cache\r\n}\r\n","import updateState from './updateState'\r\nimport conditionalNodes from '../conditionalNodes'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\nconst conditionalNodesRawStart = /\\{\\{\\?([^{}]+)\\}\\}/g\r\nconst reConditional = /([^{?])(.*?)(?=\\}\\})/g\r\n\r\nlet conditional\r\nlet currentNode\r\nlet state\r\nlet nodes\r\n\r\nfunction check (node) {\r\n  while (node) {\r\n    currentNode = node\r\n    node = node.nextSibling\r\n    if (currentNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      check.call(this, currentNode.firstChild)\r\n    } else if (currentNode.nodeType === DOCUMENT_COMMENT_TYPE && currentNode.nodeValue.match(conditionalNodesRawStart)) {\r\n      conditional = currentNode.nodeValue.trim().match(reConditional)\r\n      state = state.concat(conditional)\r\n      nodes = nodes.concat(currentNode)\r\n    }\r\n  }\r\n}\r\n\r\nfunction conditionalCache (addState) {\r\n  state = []\r\n  nodes = []\r\n  check.call(this, this.base.firstChild)\r\n  let i = state.length\r\n  while (i > 0) {\r\n    i--\r\n    updateState(state[i], addState.bind(this))\r\n    conditionalNodes.call(this, nodes[i], state[i], 'initial')\r\n  }\r\n}\r\n\r\nexport default conditionalCache\r\n","import conditionalNodes from '../conditionalNodes'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\nconst conditionalNodesRawStart = /\\{\\{\\?([^{}]+)\\}\\}/g\r\nconst reConditional = /([^{?])(.*?)(?=\\}\\})/g\r\n\r\nlet c\r\nlet currentNode\r\n\r\nfunction check (node) {\r\n  while (node) {\r\n    currentNode = node\r\n    node = node.nextSibling\r\n    if (currentNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      check.call(this, currentNode.firstChild)\r\n    } else if (currentNode.nodeType === DOCUMENT_COMMENT_TYPE && currentNode.nodeValue.match(conditionalNodesRawStart)) {\r\n      c = currentNode.nodeValue.trim().match(reConditional)\r\n      c = c && c[0]\r\n      if (this[c]) {\r\n        conditionalNodes.call(this, currentNode, c, 'conditional-set', conditionalSet)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction conditionalSet (instance) {\r\n  check.call(this, instance)\r\n}\r\n\r\nexport default conditionalSet\r\n","// function to resolve ternary operation\r\n\r\nconst test = str => str === '\\'\\'' || str === '\"\"' || str === 'null' ? '' : str\r\n\r\nexport default function (input) {\r\n  if (input.match(/([^?]*)\\?([^:]*):([^;]*)|(\\s*=\\s*)[^;]*/g)) {\r\n    let t = input.split('?')\r\n    let condition = t[0]\r\n    let leftHand = t[1].split(':')[0]\r\n    let rightHand = t[1].split(':')[1]\r\n\r\n    // check the condition fulfillment\r\n\r\n    if (this) {\r\n      if (this[condition]) {\r\n        return {\r\n          value: test(leftHand),\r\n          state: condition\r\n        }\r\n      } else {\r\n        return {\r\n          value: test(rightHand),\r\n          state: condition\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  } else return false\r\n}\r\n","import { getId, checkNodeAvailability } from '../../utils'\r\nimport genModelTemplate from './genModelTemplate'\r\nimport { cache as conditionalCache } from './conditionalNodes'\r\n\r\n// diffing two array of objects, including object properties differences\r\nconst diff = (fst, sec) =>\r\n  fst.filter(obj =>\r\n    !sec.some(inr => {\r\n      let predicate = true\r\n      for (let attr in inr) {\r\n        if (obj[attr] !== inr[attr]) {\r\n          predicate = false\r\n        }\r\n      }\r\n      return predicate\r\n    })\r\n  )\r\n\r\n// check if browser support createRange\r\nlet range\r\n\r\nif (typeof document.createRange === 'function') {\r\n  range = document.createRange()\r\n}\r\n\r\n// storage for model state\r\nlet cache = {}\r\nlet m\r\nlet documentFragment\r\n\r\nfunction render (str, obj) {\r\n  m = genModelTemplate(str, obj)\r\n  documentFragment = range.createContextualFragment(m)\r\n  documentFragment.firstChild.setAttribute('kdata-id', obj['kdata-id'])\r\n}\r\n\r\nfunction removeProtoModel (node, id, after) {\r\n  let p = node.getElementById(id)\r\n  if (p) p.childNodes[1].remove()\r\n  else if (!after) {\r\n    Object.keys(conditionalCache).map(cache =>\r\n      removeProtoModel(conditionalCache[cache].frag, id, true)\r\n    )\r\n  }\r\n}\r\n\r\nfunction genModelList (node, model, templateParse) {\r\n  let modelList\r\n  let i\r\n  let listClone\r\n  let parentNode\r\n  let updateOfNew\r\n  let diffOfOld\r\n  let pNode\r\n  let equalLength\r\n  let child\r\n  let list\r\n  let str\r\n  let oldModel\r\n  let listArg\r\n  let idx\r\n  let beforeNode\r\n  let f\r\n\r\n  cache[model] = cache[model] || {}\r\n\r\n  // check if the model use filtering\r\n  listArg = this[model] && this[model].enableFiltering ? 'listFilter' : 'list'\r\n\r\n  if (!cache[model][listArg]) {\r\n    cache[model][listArg] = node.nextSibling.cloneNode(true)\r\n  }\r\n  list = cache[model][listArg]\r\n\r\n  if (!cache[model].str) {\r\n    cache[model].str = node.nextSibling.cloneNode(true).outerHTML\r\n    // remove the first prototype node\r\n    node.nextSibling.remove()\r\n    // also remove from pristine nodes / conditional cache store\r\n    removeProtoModel(this.__pristineFragment__, node.parentNode.id)\r\n  }\r\n  str = cache[model].str\r\n\r\n  if (this[model] !== undefined && this[model].hasOwnProperty(listArg)) {\r\n    parentNode = node.parentNode\r\n\r\n    if (range && !parentNode.hasAttribute('data-ignore')) {\r\n      parentNode.setAttribute('data-ignore', '')\r\n    }\r\n\r\n    modelList = this[model][listArg]\r\n\r\n    oldModel = cache[model].oldModel || []\r\n\r\n    // check if current browser doesn't support createRange()\r\n    if (!range) {\r\n      i = 0\r\n      while (i < modelList.length) {\r\n        // fallback to regular node generation handler\r\n        listClone = list.cloneNode(true)\r\n        templateParse(this, null, listClone, modelList[i], null, 'update')\r\n        listClone.setAttribute('kdata-id', modelList[i]['kdata-id'])\r\n        parentNode.insertBefore(listClone, parentNode.lastChild)\r\n        i++\r\n      }\r\n    } else {\r\n      updateOfNew = diff(modelList, oldModel)\r\n      diffOfOld = diff(oldModel, modelList)\r\n\r\n      const diffModel = function (...args) {\r\n        pNode = args.pop()\r\n        // check if both models are equally in length\r\n        equalLength = oldModel.length === modelList.length\r\n\r\n        if (equalLength && pNode.childNodes.length !== 2) {\r\n          i = 0\r\n          while (i < updateOfNew.length) {\r\n            if (updateOfNew[i]['kdata-id'] === diffOfOld[i]['kdata-id']) {\r\n              // equal node element id\r\n              child = pNode.querySelector(`[kdata-id=\"${updateOfNew[i]['kdata-id']}\"]`)\r\n            } else {\r\n              // replace if it doesn't share the same id\r\n              child = pNode.querySelector(`[kdata-id=\"${diffOfOld[i]['kdata-id']}\"]`)\r\n            }\r\n            if (child) {\r\n              render(str, updateOfNew[i])\r\n              pNode.replaceChild(documentFragment, child)\r\n            }\r\n            i++\r\n          }\r\n        // add new objects\r\n        } else if (updateOfNew.length > 0 && diffOfOld.length === 0) {\r\n          i = 0\r\n          while (i < updateOfNew.length) {\r\n            render(str, updateOfNew[i])\r\n            if (updateOfNew[i]['kdata-id'] === modelList[modelList.length - 1]['kdata-id']) {\r\n              beforeNode = pNode.lastChild\r\n            } else {\r\n              idx = modelList.map(m => m['kdata-id']).indexOf(updateOfNew[i]['kdata-id'])\r\n              beforeNode = pNode.childNodes[idx].nextSibling\r\n            }\r\n            pNode.insertBefore(documentFragment, beforeNode)\r\n            i++\r\n          }\r\n        // destroy selected objects\r\n        } else if (updateOfNew.length === 0 && diffOfOld.length > 0) {\r\n          i = 0\r\n          while (i < diffOfOld.length) {\r\n            child = pNode.querySelector(`[kdata-id=\"${diffOfOld[i]['kdata-id']}\"]`)\r\n            if (child) {\r\n              pNode.removeChild(child)\r\n            }\r\n            i++\r\n          }\r\n        } else if (updateOfNew.length > 0 && diffOfOld.length > 0) {\r\n          // if both differences has length we remove the old children and replace it with the new ones\r\n          i = 0\r\n          while (i < diffOfOld.length) {\r\n            child = pNode.querySelector(`[kdata-id=\"${diffOfOld[i]['kdata-id']}\"]`)\r\n            if (child) {\r\n              pNode.removeChild(child)\r\n            }\r\n            i++\r\n            if (i === diffOfOld.length) {\r\n              f = 0\r\n              while (f < updateOfNew.length) {\r\n                render(str, updateOfNew[f])\r\n                pNode.insertBefore(documentFragment, pNode.lastChild)\r\n                f++\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          i = 0\r\n          while (i < modelList.length) {\r\n            render(str, modelList[i])\r\n            pNode.insertBefore(documentFragment, pNode.lastChild)\r\n            i++\r\n          }\r\n        }\r\n        // replace oldModel after diffing\r\n        cache[model].oldModel = JSON.parse(JSON.stringify(modelList))\r\n      }\r\n\r\n      // check existing parentNode in the DOM\r\n      if (parentNode.hasAttribute('id')) {\r\n        pNode = getId(parentNode.id)\r\n        if (pNode) {\r\n          diffModel.call(this, null, null, pNode)\r\n        } else {\r\n          checkNodeAvailability({ el: parentNode.id }, model, diffModel.bind(this), function () {\r\n            // we cleanup cache on failed search\r\n            cache[model].oldModel = []\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default genModelList\r\n","import { assert, getId } from '../../utils'\r\n\r\nlet cacheInit = {}\r\n\r\nexport default function (componentStr, node) {\r\n  const component = componentStr.replace('component:', '')\r\n  const c = this[component]\r\n  if (c !== undefined) {\r\n    // this is for initial component runner\r\n    if (!cacheInit[c.ID]) {\r\n      c.render(true)\r\n      cacheInit[c.ID] = c.base.cloneNode(true)\r\n      node.parentNode.replaceChild(c.base, node)\r\n    } else {\r\n      // we need to reattach event listeners if the node is not available on DOM\r\n      if (!getId(this[component].el)) {\r\n        c.base = c.__pristineFragment__.cloneNode(true)\r\n        c.render(true)\r\n        node.parentNode.replaceChild(c.base, node)\r\n      } else {\r\n        node.parentNode.replaceChild(cacheInit[c.ID].cloneNode(true), node)\r\n        // inform sub-component to update\r\n        c.callBatchPoolUpdate()\r\n      }\r\n    }\r\n  } else {\r\n    assert(false, 'Component ' + component + ' does not exist.')\r\n  }\r\n}\r\n","import genModelList from '../genModelList'\r\nimport componentParse from '../componentParse'\r\n\r\nconst re = /{{([^{}]+)}}/g\r\nconst model = /^model:/g\r\nconst component = /^component:([^{}]+)/g\r\n\r\nexport default function (value, node) {\r\n  let rep\r\n  let modelRep\r\n\r\n  if (value.match(re)) {\r\n    rep = value.replace(re, '$1').trim()\r\n    if (rep.match(model)) {\r\n      modelRep = rep.replace('model:', '')\r\n      genModelList.call(this, node, modelRep)\r\n    } else if (rep.match(component)) {\r\n      componentParse.call(this, rep, node)\r\n    }\r\n  }\r\n}\r\n","export default function (node, value, replace, withTo) {\r\n  let re = new RegExp(replace, 'g')\r\n  node.nodeValue = node.nodeValue.replace(re, withTo)\r\n}\r\n","import ternaryOps from '../ternaryOps'\r\nimport strInterpreter from '../strInterpreter'\r\nimport updateState from './updateState'\r\nimport valAssign from './valAssign'\r\n\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nexport default function (value, node, addState, isAttr) {\n  const props = value.match(re)\r\n  let ln = props.length\r\n  let rep\r\n  let tnr\r\n  let isObjectNotation\r\n\r\n  while (ln) {\r\n    ln--\r\n    rep = props[ln].replace(re, '$1')\r\n    tnr = ternaryOps.call(this, rep)\r\n    isObjectNotation = strInterpreter(rep)\r\n    if (isObjectNotation) {\r\n      updateState(rep, addState)\r\n      if (!isAttr) {\r\n        valAssign(node, value, '{{' + rep + '}}', this[isObjectNotation[0]][isObjectNotation[1]])\r\n      } else {\r\n        return value.replace(props, this[isObjectNotation[0]][isObjectNotation[1]])\r\n      }\r\n    } else {\r\n      if (tnr) {\r\n        updateState(tnr.state, addState)\r\n        if (!isAttr) {\r\n          valAssign(node, value, '{{' + rep + '}}', tnr.value)\r\n        } else {\r\n          return value.replace(props, tnr.value)\r\n        }\r\n      } else {\r\n        if (this[rep] !== undefined) {\r\n          updateState(rep, addState)\r\n          if (!isAttr) {\r\n            valAssign(node, value, '{{' + rep + '}}', this[rep])\r\n          } else {\r\n            return value.replace(props, this[rep])\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import replaceHandleBars from './replaceHandleBars'\r\n\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nfunction inspectAttributes (node, addState) {\r\n  let nodeAttributes = node.attributes\r\n  let i = 0\r\n  let a\r\n  let ns\r\n  let name\r\n\r\n  for (i = nodeAttributes.length; i--;) {\r\n    a = nodeAttributes[i]\r\n    name = a.localName\r\n    ns = a.nodeValue\r\n    if (re.test(name)) {\r\n      node.removeAttribute(name)\r\n      name = replaceHandleBars.call(this, name, node, addState, true)\r\n      node.setAttribute(name, ns)\r\n    } else if (re.test(ns)) {\r\n      ns = replaceHandleBars.call(this, ns, node, addState, true)\r\n      if (name === 'checked') {\r\n        if (ns === '') {\r\n          node.checked = false\r\n        } else {\r\n          node.checked = true\r\n        }\r\n        node.removeAttribute(name)\r\n      } else {\r\n        if (ns === '') {\r\n          node.setAttribute(name, '')\r\n        } else {\r\n          node.setAttribute(name, ns)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default inspectAttributes\n","import replaceCommentBlock from './replaceCommentBlock'\r\nimport inspectAttributes from './inspectAttributes'\r\nimport replaceHandleBars from './replaceHandleBars'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nlet currentNode\r\n\r\nfunction recon (node, addState) {\r\n  while (node) {\r\n    currentNode = node\r\n    node = node.nextSibling\r\n    if (currentNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      if (currentNode.hasAttributes()) {\r\n        inspectAttributes.call(this, currentNode, addState)\r\n      }\r\n      recon.call(this, currentNode.firstChild, addState)\r\n    } else if (currentNode.nodeValue.match(re)) {\r\n      if (currentNode.nodeType === DOCUMENT_COMMENT_TYPE) {\r\n        replaceCommentBlock.call(this, currentNode.nodeValue, currentNode)\r\n      } else {\r\n        replaceHandleBars.call(this, currentNode.nodeValue, currentNode, addState)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction reconcile (instance, addState) {\r\n  recon.call(this, instance, addState)\r\n}\r\n\r\nexport default reconcile\r\n","const DOCUMENT_ELEMENT_TYPE = 1\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nfunction lookupParentNode (rootNode, node) {\r\n  let cNode\r\n  while (node) {\r\n    cNode = node\r\n    node = node.parentNode\r\n    if (cNode.nodeType === DOCUMENT_ELEMENT_TYPE && cNode.hasAttribute('kdata-id')) {\r\n      return { id: cNode.getAttribute('kdata-id'), node: cNode }\r\n    }\r\n    if (cNode.isEqualNode(rootNode)) {\r\n      node = null\r\n    }\r\n  }\r\n}\r\n\r\nconst getIndex = (id, model) => model.list.map(m => m['kdata-id']).indexOf(id)\r\n\r\nfunction addEvent (node, evtData) {\r\n  delete evtData.isModel\r\n  let evtName = Object.keys(evtData)[0]\r\n  let handler = evtData[evtName]\r\n  if (this[handler] !== undefined && typeof this[handler] === 'function') {\r\n    node.addEventListener(evtName, this[handler].bind(this), !!evtData['useCapture'])\r\n  }\r\n}\r\n\r\nfunction fn (model, handler, node, e) {\r\n  e.stopPropagation()\r\n  if (e.target !== e.currentTarget) {\r\n    let t = lookupParentNode(node, e.target)\r\n    this[handler](model.list[getIndex(t.id, model)], e.target, t.node, e)\r\n  }\r\n}\r\n\r\nfunction addEventModel (node, evtData) {\r\n  delete evtData.isModel\r\n  let evtName = Object.keys(evtData)[0]\r\n  let handler = evtData[evtName]\r\n  if (this[handler] !== undefined && typeof this[handler] === 'function') {\r\n    let rep = node.firstChild.nodeValue.replace(re, '$1').trim()\r\n    rep = rep.replace('model:', '')\r\n    let model = this[rep]\r\n    node.addEventListener(evtName, fn.bind(this, model, handler, node), !!evtData['useCapture'])\r\n  }\r\n}\r\n\r\nexport {\r\n  addEvent,\r\n  addEventModel\r\n}\r\n","import { getId } from '../../../utils'\r\nimport { addEvent, addEventModel } from './addEvent'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst modelRaw = /\\{\\{model:([^{}]+)\\}\\}/g\r\n\r\n// let cacheEvents = []\r\n\r\nfunction testEventNode (node) {\r\n  let nodeAttributes = node.attributes\r\n  let i = 0\r\n  let a\r\n  let name\r\n  let value\r\n  let evtName\r\n  let handler\r\n  let evtStore = []\r\n  let obs\r\n  let args\r\n\r\n  while (i < nodeAttributes.length) {\r\n    a = nodeAttributes[i]\r\n    name = a.localName\r\n    value = a.nodeValue\r\n    if (/^k-/.test(name)) {\r\n      evtName = name.replace(/^k-/, '')\r\n      handler = value.match(/[a-zA-Z]+(?![^(]*\\))/)[0]\r\n      args = value.match(/\\(([^{}]+)\\)/)\r\n      args = args ? args[1] : ''\r\n      obs = {}\r\n      obs[evtName] = handler\r\n      if (args) obs[args] = true\r\n      obs['isModel'] = false\r\n      evtStore.push(obs)\r\n      if (node.hasChildNodes() && node.firstChild.nodeType !== DOCUMENT_ELEMENT_TYPE && node.firstChild.nodeValue.match(modelRaw)) {\r\n        obs['isModel'] = true\r\n      }\r\n    }\r\n    i++\r\n  }\r\n  // if (evtStore.length && !node.hasAttribute('evt-data')) {\r\n  //   let rd = minId()\r\n  //   node.setAttribute('evt-data', rd)\r\n  //   cacheEvents[rd] = evtStore\r\n  // }\r\n  return evtStore\r\n}\r\n\r\nlet events\r\nlet currentNode\r\n\r\nfunction addEvt (node) {\r\n  while (node) {\r\n    currentNode = node\r\n    node = node.nextSibling\r\n    if (currentNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      if (currentNode.hasAttributes() && !getId(currentNode.id)) {\r\n        events = testEventNode.call(this, currentNode)\r\n        if (events.length) {\r\n          events.map(e =>\r\n            !e.isModel ? addEvent.call(this, currentNode, e) : addEventModel.call(this, currentNode, e)\r\n          )\r\n        }\r\n      }\r\n      addEvt.call(this, currentNode.firstChild)\r\n    }\r\n  }\r\n}\r\n\r\nfunction eventBuff (instance) {\r\n  addEvt.call(this, instance)\r\n}\r\n\r\nexport default eventBuff\r\n","import { getId } from '../../../utils'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n\r\nfunction isEqual (oldNode, newNode) {\r\n  return (\r\n    (isIgnored(oldNode) && isIgnored(newNode)) ||\r\n    oldNode.isEqualNode(newNode)\r\n  )\r\n}\r\n\r\nfunction isIgnored (node) {\r\n  return node.getAttribute('data-ignore') != null\r\n}\r\n\r\nfunction arbiter (oldNode, newNode) {\r\n  if (oldNode.nodeName !== 'INPUT') return\r\n  if (oldNode.checked !== newNode.checked) {\r\n    oldNode.checked = newNode.checked\r\n  }\r\n}\r\n\r\nfunction setAttr (oldNode, newNode) {\r\n  let oAttr = newNode.attributes\r\n  let output = {}\r\n  let i = 0\r\n  while (i < oAttr.length) {\r\n    output[oAttr[i].name] = oAttr[i].value\r\n    i++\r\n  }\r\n  let iAttr = oldNode.attributes\r\n  let input = {}\r\n  let j = 0\r\n  while (j < iAttr.length) {\r\n    input[iAttr[j].name] = iAttr[j].value\r\n    j++\r\n  }\r\n  for (let attr in output) {\r\n    if (oldNode.attributes[attr] && oldNode.attributes[attr].name === attr && oldNode.attributes[attr].value !== output[attr]) {\r\n      oldNode.setAttribute(attr, output[attr])\r\n    } else {\r\n      if (!oldNode.hasAttribute(attr)) {\r\n        oldNode.setAttribute(attr, output[attr])\r\n      }\r\n    }\r\n  }\r\n  for (let attr in input) {\r\n    if (newNode.attributes[attr] && oldNode.attributes[attr]) {\r\n    } else if (attr !== 'evt-data') {\r\n      oldNode.removeAttribute(attr)\r\n    }\r\n  }\r\n}\r\n\r\nfunction patch (oldNode, newNode) {\r\n  if (oldNode.nodeType === newNode.nodeType) {\r\n    if (oldNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      arbiter(oldNode, newNode)\r\n      if (isEqual(oldNode, newNode)) return\r\n      diff(oldNode.firstChild, newNode.firstChild)\r\n      if (oldNode.nodeName === newNode.nodeName) {\r\n        setAttr(oldNode, newNode)\r\n      } else {\r\n        oldNode.parentNode.replaceChild(newNode, oldNode)\r\n      }\r\n    } else {\r\n      if (oldNode.nodeValue !== newNode.nodeValue) {\r\n        oldNode.nodeValue = newNode.nodeValue\r\n      }\r\n    }\r\n  } else {\r\n    oldNode.parentNode.replaceChild(newNode, oldNode)\r\n  }\r\n}\r\n\r\nfunction getIndex (store, count) {\r\n  return store.length - count - 1\r\n}\r\n\r\nlet checkNew\r\nlet checkOld\r\n\r\nfunction diff (oldNode, newNode) {\r\n  let count = 0\r\n  let newStore = []\r\n  while (newNode) {\r\n    count++\r\n    checkNew = newNode\r\n    newNode = newNode.nextSibling\r\n    newStore.push(checkNew)\r\n  }\r\n  let index\r\n  let oldParentNode = oldNode && oldNode.parentNode\r\n  while (oldNode) {\r\n    count--\r\n    checkOld = oldNode\r\n    oldNode = oldNode.nextSibling\r\n    index = getIndex(newStore, count)\r\n    if (checkOld && newStore[index]) {\r\n      patch(checkOld, newStore[index])\r\n    } else if (checkOld && !newStore[index]) {\r\n      oldParentNode.removeChild(checkOld)\r\n    }\r\n    if (oldNode === null) {\r\n      while (count > 0) {\r\n        count--\r\n        index = getIndex(newStore, count)\r\n        oldParentNode.appendChild(newStore[index])\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction diffNodes (instance) {\r\n  let base = getId(this.el)\r\n  if (base && !this.IS_STUB) {\r\n    diff(base.firstChild, instance)\r\n  } else if (base) {\r\n    // diff(base.firstChild, instance.firstChild)\r\n  }\r\n}\r\n\r\nexport default diffNodes\r\n","import conditionalSet from './templateParse/conditionalSet'\r\nimport reconcile from './templateParse/reconcile'\r\nimport eventBuff from './templateParse/eventBuff'\r\nimport diffNodes from './templateParse/diffNodes'\r\nimport strInterpreter from './strInterpreter'\r\n\r\nconst DELAY = 1\r\n\r\nconst morpher = function () {\r\n  genElement.call(this)\r\n  // exec life-cycle componentDidUpdate\r\n  if (this.componentDidUpdate && typeof this.componentDidUpdate === 'function') {\r\n    this.componentDidUpdate()\r\n  }\r\n}\r\n\r\nlet timer = {}\r\n\r\nconst updateContext = function (fn, delay) {\r\n  timer[this.ID] = timer[this.ID] || null\r\n  clearTimeout(timer[this.ID])\r\n  timer[this.ID] = setTimeout(() => fn.call(this), delay)\r\n}\r\n\r\nconst nextState = function (i) {\r\n  let self = this\r\n  let state\r\n  let value\r\n  if (i < stateList[this.ID].length) {\r\n    state = stateList[this.ID][i]\r\n    value = this[state]\r\n\r\n    // if value is undefined, likely has object notation we convert it to array\r\n    if (value === undefined) value = strInterpreter(state)\r\n\r\n    if (value && Array.isArray(value)) {\r\n      // using split object notation as base for state update\r\n      let inVal = this[value[0]][value[1]]\r\n\r\n      Object.defineProperty(this[value[0]], value[1], {\r\n        enumerable: false,\r\n        configurable: true,\r\n        get: function () {\r\n          return inVal\r\n        },\r\n        set: function (val) {\r\n          inVal = val\r\n          updateContext.call(self, morpher, DELAY)\r\n        }\r\n      })\r\n    } else {\r\n      // handle parent state update if the state is not an object\r\n      Object.defineProperty(this, state, {\r\n        enumerable: false,\r\n        configurable: true,\r\n        get: function () {\r\n          return value\r\n        },\r\n        set: function (val) {\r\n          value = val\r\n          updateContext.call(self, morpher, DELAY)\r\n        }\r\n      })\r\n    }\r\n    i++\r\n    nextState.call(this, i)\r\n  }\r\n}\r\n\r\nconst setState = function () {\r\n  nextState.call(this, 0)\r\n}\r\n\r\nlet stateList = {}\r\n\r\nfunction clearState () {\r\n  if (stateList[this.ID]) stateList[this.ID] = []\r\n}\r\n\r\nfunction addState (state) {\r\n  stateList[this.ID] = stateList[this.ID] || []\r\n  if (stateList[this.ID].indexOf(state) === -1) { stateList[this.ID] = stateList[this.ID].concat(state) }\r\n}\r\n\r\nconst genElement = function () {\r\n  this.base = this.__pristineFragment__.cloneNode(true)\r\n  conditionalSet.call(this, this.base.firstChild)\r\n  reconcile.call(this, this.base.firstChild, addState.bind(this))\r\n  eventBuff.call(this, this.base.firstChild, true)\r\n  diffNodes.call(this, this.base.firstChild)\r\n}\r\n\r\nexport {\r\n  genElement,\r\n  addState,\r\n  setState,\r\n  clearState,\r\n  updateContext,\r\n  morpher\r\n}\r\n","import conditionalCache from './templateParse/conditionalCache'\r\nimport conditionalSet from './templateParse/conditionalSet'\r\nimport reconcile from './templateParse/reconcile'\r\nimport eventBuff from './templateParse/eventBuff'\r\nimport { setState, addState } from './genElement'\r\nimport { getId, assert } from '../../utils'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n\r\nexport default function (stub) {\r\n  conditionalCache.call(this, addState.bind(this))\r\n  conditionalSet.call(this, this.base.firstChild)\r\n  reconcile.call(this, this.base.firstChild, addState.bind(this))\r\n  eventBuff.call(this, this.base.firstChild)\r\n  const el = stub || getId(this.el)\r\n  if (el) {\r\n    if (el.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      el.setAttribute('data-ignore', '')\r\n    } else {\r\n      assert(this.base.childNodes.length === 1, 'Sub-component should only has a single rootNode.')\r\n      !this.base.firstChild.hasAttribute('data-ignore') && this.base.firstChild.setAttribute('data-ignore', '')\r\n    }\r\n    // listen to state changes\r\n    setState.call(this)\r\n    // mount fragment to DOM\r\n    if (!stub) {\r\n      el.appendChild(this.base)\r\n    }\r\n\r\n    // since component already rendered, trigger its life-cycle method\r\n    if (this.componentDidMount && typeof this.componentDidMount === 'function') {\r\n      this.componentDidMount()\r\n    }\r\n  } else {\r\n    assert(false, 'No element with id: \"' + this.el + '\" exist.')\r\n  }\r\n}\r\n","import { clearState } from '../components/genElement'\r\nimport { assert } from '../../utils'\r\n\r\nconst DOCUMENT_FRAGMENT_TYPE = 11\r\nconst DOCUMENT_TEXT_TYPE = 3\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n/**\r\n * @private\r\n * @description\r\n * Mount an instance of string or html elements\r\n *\r\n * @param {String|Object} instance - the html/string\r\n */\r\nexport default function (instance) {\r\n  let base\r\n  let tempDiv\r\n  let frag = document.createDocumentFragment()\r\n  // Before we begin to parse an instance, do a run-down checks\r\n  // to clean up back-tick string which usually has line spacing.\r\n  if (typeof instance === 'string') {\r\n    base = instance.trim().replace(/\\s+/g, ' ')\r\n    tempDiv = document.createElement('div')\r\n    tempDiv.innerHTML = base\r\n    while (tempDiv.firstChild) {\r\n      frag.appendChild(tempDiv.firstChild)\r\n    }\r\n  // If instance is a html element process as html entities\r\n  } else if (typeof instance === 'object' && instance['nodeType']) {\r\n    if (instance['nodeType'] === DOCUMENT_ELEMENT_TYPE) {\r\n      frag.appendChild(instance)\r\n    } else if (instance['nodeType'] === DOCUMENT_FRAGMENT_TYPE) {\r\n      frag = instance\r\n    } else if (instance['nodeType'] === DOCUMENT_TEXT_TYPE) {\r\n      frag.appendChild(instance)\r\n    } else {\r\n      assert(false, 'Unable to parse instance, unknown type.')\r\n    }\r\n  } else {\r\n    assert(false, 'Parameter is not a string or a html element.')\r\n  }\r\n  // we store the pristine instance in __pristineFragment__\r\n  this.__pristineFragment__ = frag.cloneNode(true)\r\n  this.base = frag\r\n\r\n  // cleanup states on mount\r\n  clearState.call(this)\r\n  return this\r\n}\r\n","const genId = () => {\r\n  const rd = () => (Math.random() * 1 * 1e17).toString(36)\r\n  return `KDATA-${rd()}-${rd()}`\r\n}\r\n\r\nconst minId = () => (Math.random() * 1 * 1e17).toString(36)\r\n\r\nconst getId = id => document.getElementById(id)\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Check a node availability in 100ms, if not found silenty skip the event\r\n * or execute a callback\r\n *\r\n * @param {string} id - the node id\r\n * @param {function} callback - the function to execute on success\r\n * @param {function} notFound - the function to execute on failed\r\n */\r\nconst checkNodeAvailability = (component, componentName, callback, notFound) => {\r\n  let ele = getId(component.el)\r\n  let found = false\r\n  let t\r\n  function find () {\r\n    ele = getId(component.el)\r\n    if (ele) {\r\n      clearInterval(t)\r\n      found = true\r\n      callback(component, componentName, ele)\r\n    }\r\n  }\r\n  function fail () {\r\n    clearInterval(t)\r\n    if (!found && notFound && typeof notFound === 'function') notFound()\r\n  }\r\n  if (ele) return ele\r\n  else {\r\n    t = setInterval(find, 0)\r\n    // ignore finding the node after sometimes\r\n    setTimeout(fail, 5)\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Confirm that a value is truthy, throws an error message otherwise.\r\n *\r\n * @param {*} val - the val to test.\r\n * @param {string} msg - the error message on failure.\r\n * @throws {Error}\r\n */\r\nconst assert = (val, msg) => {\r\n  if (!val) throw new Error('(keet) ' + msg)\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Simple html template literals MODIFIED from : http://2ality.com/2015/01/template-strings-html.html\r\n * by Dr. Axel Rauschmayer\r\n * no checking for wrapping in root element\r\n * no strict checking\r\n * remove spacing / indentation\r\n * keep all spacing within html tags\r\n * include handling ${} in the literals\r\n */\r\nconst html = (...args) => {\r\n  const literals = args.shift()\r\n  const substs = args.slice()\r\n\r\n  let result = literals.raw.reduce((acc, lit, i) => acc + substs[i - 1] + lit)\r\n  // remove spacing, indentation from every line\r\n  result = result.split(/\\n+/)\r\n  result = result.map(t => t.trim()).join('')\r\n  return result\r\n}\r\n\r\nconst notEqual = function (a, b) {\r\n  return a['kdata-id'] !== b['kdata-id']\r\n}\r\n\r\nconst inform = function (...args) {\r\n  this.exec && typeof this.exec === 'function' && this.exec.apply(null, args)\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Copy with modification from preact-todomvc. Model constructor with\r\n * registering callback listener in Object.defineProperty. Any modification\r\n * to ```this.list``` instance will subsequently inform all registered listener.\r\n *\r\n * {{model:<myModel>}}<myModelTemplateString>{{/model:<myModel>}}\r\n *\r\n */\r\nclass createModel {\r\n  constructor (enableFiltering) {\r\n    // if enableFiltering is assigned a value, model generation will\r\n    // use `listFilter` instead of `list`\r\n    this.enableFiltering = enableFiltering || null\r\n\r\n    this.exec = null\r\n\r\n    this.model = []\r\n\r\n    // Register callback listener of any changes\r\n    Object.defineProperty(this, 'list', {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get: function () {\r\n        return this.model\r\n      },\r\n      set: function (val) {\r\n        this.model = val\r\n        inform.call(this, this.model, this.listFilter)\r\n      }\r\n    })\r\n\r\n    // Register callback listener of any changes with filter\r\n    Object.defineProperty(this, 'listFilter', {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get: function () {\r\n        return !this.prop ? this.model : this.model.filter(obj => obj[this.prop] === this.value)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @description\r\n   * Subscribe to the model changes (add/update/destroy)\r\n   *\r\n   * @param {Object} model - the model including all prototypes\r\n   *\r\n   */\r\n  subscribe (fn) {\r\n    this.exec = fn\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @description\r\n   * Add new object to the model list\r\n   *\r\n   * @param {Object} obj - new object to add into the model list\r\n   *\r\n   */\r\n  add (obj) {\r\n    this.list = this.list.concat({ ...obj, 'kdata-id': minId() })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @description\r\n   * Update existing object in the model list\r\n   *\r\n   * @param {String} lookupId - lookup id property name of the object\r\n   * @param {Object} updateObj - the updated properties\r\n   *\r\n   */\r\n  update (updateObj) {\r\n    this.list = this.list.map(obj =>\r\n      notEqual(obj, updateObj) ? obj : updateObj\r\n    )\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @description\r\n   * Filter the model data by selected properties, constructor\r\n   * instantiation should be apply with boolean true as argument\r\n   * to enable filtering\r\n   * @param {String} prop - property of the object\r\n   * @param {String|Boolean|Interger} value - property value\r\n   *\r\n   */\r\n  filter (prop, value) {\r\n    this.prop = prop\r\n    this.value = value\r\n    this.list = this.list.map(obj => obj)\r\n  }\r\n\r\n  /**\r\n * @private\r\n * @description\r\n * Removed existing object in the model list\r\n *\r\n * @param {String} lookupId - lookup id property name of the object\r\n * @param {String} objId - unique identifier of the lookup id\r\n *\r\n */\r\n  destroy (destroyObj) {\r\n    this.list = this.list.filter(obj =>\r\n      notEqual(obj, destroyObj)\r\n    )\r\n  }\r\n}\r\n\r\nexport {\r\n  createModel,\r\n  html,\r\n  assert,\r\n  checkNodeAvailability,\r\n  genId,\r\n  getId,\r\n  minId\r\n}\r\n","import ternaryOps from './ternaryOps'\r\n\r\nconst re = new RegExp(/(\\schecked=\")(.*?)(?=\")/g)\r\n\r\nlet tmpl = ''\r\nlet rep\r\nlet isTernary\r\nlet i\r\nlet len\r\nlet match\r\n\r\nexport default (string, obj) => {\r\n  const arrProps = string.match(/{{([^{}]+)}}/g)\r\n  tmpl = string\r\n  for (i = 0, len = arrProps.length; i < len; i++) {\r\n    rep = arrProps[i].replace(/{{([^{}]+)}}/g, '$1')\r\n    isTernary = ternaryOps.call(obj, rep)\r\n    if (isTernary) {\r\n      tmpl = tmpl.replace('{{' + rep + '}}', isTernary.value)\r\n    } else {\r\n      tmpl = tmpl.replace('{{' + rep + '}}', obj[rep])\r\n    }\r\n\r\n    match = tmpl.match(re)\r\n    if (match) {\r\n      if (match[0].length === 17) { tmpl = tmpl.replace(' checked=\"checked\"', ' checked') } else { tmpl = tmpl.replace(' checked=\"\"', '') }\r\n    }\r\n  }\r\n  return tmpl\r\n}\r\n","export default (str) => {\r\n  let res = str.match(/\\.*\\./g)\r\n  let result\r\n  if (res && res.length > 0) {\r\n    return str.split('.')\r\n  }\r\n  return result\r\n}\r\n","\r\n/**\r\n * Keetjs v4.0.0 Alpha release: https://github.com/keetjs/keet\r\n * Minimalist view layer for the web\r\n *\r\n * <<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Keetjs >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n *\r\n * Copyright 2018, Shahrul Nizam Selamat\r\n * Released under the MIT License.\r\n */\r\n\r\nimport parseStr from './src/components/parseStr'\r\nimport { updateContext, morpher } from './src/components/genElement'\r\nimport { genId, assert, html, createModel } from './utils'\r\nimport mount from './src/base/mount'\r\n\r\nwindow.l = console.log.bind(console)\r\nwindow.tr = console.trace.bind(console)\r\n\r\n/**\r\n * @description\r\n * The main constructor of Keet\r\n *\r\n * Basic Usage :-\r\n *\r\n *    const App extends Keet {}\r\n *    const app = new App()\r\n *    app.mount('hello world').link('app')\r\n *\r\n */\r\nclass Keet {\r\n  constructor () {\r\n    this.ID = Keet.indentity\r\n  }\r\n\r\n  // generate ID for the component\r\n  static get indentity () {\r\n    return genId()\r\n  }\r\n\r\n  mount (instance) {\r\n    return mount.call(this, instance)\r\n  }\r\n\r\n  link (id) {\r\n    // The target DOM where the rendering will took place.\r\n    if (!id) assert(id, 'No id is given as parameter.')\r\n    this.el = id\r\n    this.render()\r\n    return this\r\n  }\r\n\r\n  render (stub) {\r\n    // life-cycle method before rendering the component\r\n    if (this.componentWillMount && typeof this.componentWillMount === 'function') {\r\n      this.componentWillMount()\r\n    }\r\n\r\n    // Render this component to the target DOM\r\n    if (stub) {\r\n      this.IS_STUB = true\r\n    }\r\n    parseStr.call(this, stub)\r\n  }\r\n\r\n  callBatchPoolUpdate () {\r\n    // force component to update, if any state / non-state\r\n    // value changed DOM diffing will occur\r\n    updateContext.call(this, morpher, 1)\r\n  }\r\n\r\n  subscribe (fn) {\r\n    this.exec = fn\r\n  }\r\n\r\n  inform (model) {\r\n    this.exec && typeof this.exec === 'function' && this.exec(model)\r\n  }\r\n}\r\n\r\nexport default Keet\r\n\r\n// export {\r\n//   Keet as default,\r\n//   html,\r\n//   createModel\r\n// }\r\n"]}